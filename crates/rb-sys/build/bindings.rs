use crate::RbConfig;
use rb_sys_build::bindings::Builder;
use std::cell::RefCell;
use std::fs::File;
use std::ops::DerefMut;
use std::path::PathBuf;
use std::rc::Rc;
use std::{env, error::Error};

pub fn generate(
    rb: &RbConfig,
    static_ruby: bool,
    cfg_out: Rc<RefCell<File>>,
) -> Result<PathBuf, Box<dyn Error>> {
    let mut builder = Builder::new();
    let out_dir = PathBuf::from(env::var("OUT_DIR").unwrap());
    let ruby_version = rb.ruby_version();
    let target = env::var("TARGET")?;
    let crate_version = env!("CARGO_PKG_VERSION");
    let out_path = format!("bindings-{crate_version}-{target}-{ruby_version}.rs");
    let out_path = out_dir.join(out_path);

    builder = builder
        .doc_comment(doc_header(rb))
        .print_cargo_directives(true)
        .include(rb.get("rubyhdrdir"))
        .include(rb.get("rubyarchhdrdir"))
        .append_cflags(&rb.cflags())
        .append_cflags(&rb.cppflags());

    // This is needed because bindgen doesn't support the `__declspec(dllimport)` on
    // global variables. Without it, symbols are not found.
    // See https://stackoverflow.com/a/66182704/2057700
    if rb.is_msvc() {
        let libruby = rb.libruby(static_ruby);
        builder = builder.add_link_ruby_directive(libruby);
        builder = builder.exclude_ruby_header("ruby/atomic.h"); // Not supported on mswin
    }

    if env::var_os("CARGO_FEATURE_BINDGEN_DEPRECATED_TYPES").is_some() {
        builder = builder.deprecated_types(true);
    }

    if env::var_os("CARGO_FEATURE_BINDGEN_RBIMPLS").is_some() {
        builder = builder.rbimpls(true);
    }

    if env::var_os("CARGO_FEATURE_BINDGEN_LAYOUT_TESTS").is_some() {
        builder = builder.layout_tests(true);
    }

    if env::var_os("CARGO_FEATURE_BINDGEN_IMPL_DEBUG").is_some() {
        builder = builder.impl_debug(true);
    }

    if env::var_os("CARGO_FEATURE_DOCS").is_some() {
        builder = builder.docs(true);
    }

    let bindings = builder.generate()?;

    bindings.write_code_to_file(&out_path)?;
    bindings.write_cargo_cfg_to(cfg_out.borrow_mut().deref_mut())?;
    bindings.write_rustc_cfg_to(&mut std::io::stdout())?;

    Ok(out_path)
}

fn doc_header(rb_config: &RbConfig) -> String {
    format!(
        "// Generated by [rb-sys]({}) for Ruby {} ({}).\n\n",
        env!("CARGO_PKG_REPOSITORY"),
        rb_config.ruby_version(),
        rb_config.platform()
    )
}
